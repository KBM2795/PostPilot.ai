import dbConnect from "@/lib/dbConnect";

import { UserInfoModel } from "@/models/UserInfo";
import { UserModel } from "@/models/User";
import { PostModel } from "@/models/Post";
import { auth ,clerkClient} from '@clerk/nextjs/server'
import { currentUser } from '@clerk/nextjs/server'
import axios from "axios";


export async function POST(req : Request) {
    try {
        await dbConnect();

        const { userId } = await auth()
   
        if (!userId) {
            return Response.json({
                success: false,
                message: "You must be logged in to complete your profile",
            }, { status: 401 });
        }

        // Get user data from Clerk
        const user = await currentUser()
        const email = user?.emailAddresses[0]?.emailAddress;
        const username = user?.username;
        
        if (!email || !username) {
            return Response.json({
                success: false,
                message: "Unable to retrieve your email or username",
            }, { status: 400 });
        }

        // Get data from request body
        const promptData = await req.json();
        const userDB = await UserModel.findOne({ email: email });
        const userInfo = await UserInfoModel.findOne({ email: email });
        
        if (!userInfo || !userDB) {
            return Response.json({
                success: false,
                message: "User is not found in database",
            }, { status: 404 });
        }

        if(!userDB.credits || userDB.credits <= 0) {
            return Response.json({
                success: false,
                message: "You have no credits left",
            }, { status: 400 });
        }
        // Validate the fields being updated

        const data = {
                user_id: userDB._id,
                email:email,
                topic:promptData.topic,
                additional_info:promptData.overview,
                preferred_tone:userInfo.tone,
                media_type:["text","image"],
                inspiration_link:promptData.referenceUrl,
        }
        
        try {
            const n8n_create = process.env.n8n_create!;
            const axiosResponse = await axios.post(n8n_create, data)

            console.log("Response from n8n:", axiosResponse);

            if (!axiosResponse) {
                return Response.json({
                    success: false,
                    message: "Error generating post by ai agent",
                }, { status: 404 });
            }

            // [
            //     {
            //         "text": "AI in 2025: Key Benefits and Opportunities for Aspiring Space Professionals\n\nAs an aspiring ISRO Scientist/Engineer, I'm deeply fascinated by the transformative potential of AI in space exploration. Looking ahead to 2025, I see several key benefits emerging:\n\n1. **Enhanced Automation and Efficiency:** AI can automate complex tasks, from data analysis to mission planning, freeing up human resources for more strategic endeavors. This increased efficiency can significantly accelerate our progress in space research and exploration.\n2. **Data-Driven Insights:** The vast amounts of data generated by space missions can be effectively analyzed by AI algorithms, uncovering hidden patterns and insights that can lead to groundbreaking discoveries.\n3. **Improved Safety and Reliability:** AI can play a vital role in enhancing the safety and reliability of space missions by predicting potential risks, optimizing spacecraft performance, and enabling autonomous navigation. This is crucial for long-duration missions and deep space exploration.\n4. **New Frontiers in Space Technology:** AI can drive innovation in areas such as robotics, autonomous spacecraft, and advanced propulsion systems, pushing the boundaries of what's possible in space technology.\n\nI'm eager to connect with professionals in the space technology and AI fields to explore how we can harness these benefits to achieve greater heights in space exploration. #AI #SpaceExploration #ISRO #Technology #Innovation #India\n",
            //         "image_url": "https://res.cloudinary.com/dy8y5ruta/image/upload/v1746017462/o09zgheoyh8wc0dk7dle.jpg",
            //         "image_id": "o09zgheoyh8wc0dk7dle"
            //     }
            // ]

            const postData = axiosResponse.data[0];
            const post = await PostModel.create({
                userId: userDB._id,
                prompt: {
                    topic: promptData.topic,
                    additional_info: promptData.overview,
                    inspiration_link: promptData.referenceUrl,
                },
                postVersions: [{
                    version: 1,
                    content: postData
                }]
            });

            const postId = post._id;

            const userCredits = userDB.credits - 1;

            const updatedUser = await UserModel.findOneAndUpdate(
                { email: email },
                { $set: { credits: userCredits } },
                { new: true }
            );

            if (!updatedUser) {
                return Response.json({
                    success: false,
                    message: "Failed to update user credits",
                }, { status: 400 });
            }


            return Response.json({
                success: true,
                message: "Post created successfully",
                data: postId,
            }, { status: 200 });

        } catch (error) {
            console.error("Error validating fields:", error);
            return Response.json({
                success: false,
                message: "error generating post by ai agent",
                error: error instanceof Error ? error.message : "Unknown error"
            }, { status: 400 });
        }

            

    } catch (error) {
        console.error("Error updating user information:", error);
        return Response.json({
            success: false,
            message: "An unexpected error occurred while creating a post",
            error: error instanceof Error ? error.message : "Unknown error"
        }, { status: 500 });
    }
}